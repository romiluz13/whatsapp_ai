/**
 * WhatsApp AI Co-Pilot - Sidebar Interactions
 */

// This script will be injected by content.js and will handle sidebar interactions

// Sidebar animation variables
let sidebarOpen = true;
const BACKEND_URL = 'http://localhost:3000';
let currentSelectedChatId = null; // Stores the ID of the currently selected chat
let currentSelectedChatName = null; // Stores the name of the currently selected chat
let fetchedMessagesForSelectedChat = []; // Stores messages for AI processing (role might change)

const DEFAULT_SUMMARY_PROMPT_TEXT_DISPLAY = `The default summary prompt is dynamically generated by the backend based on message count and date range. It instructs the AI to produce a detailed HTML summary, adapting to the conversation's primary language (e.g., Hebrew or English), and focusing on key topics, insights, notable links, and questions. The structure includes sections like Main Overview, Key Topics, Notable Links, Key Questions, and a Hot Topic Snippet.`;
const DEFAULT_QA_PROMPT_TEXT_DISPLAY = `You are an AI assistant designed to answer questions about a specific WhatsApp group conversation, often focused on technology or AI discussions. Use ONLY the provided message history to answer the user's question accurately and concisely, extracting relevant information.

**LANGUAGE INSTRUCTION:**
*   If the conversation history (and potentially the user's question) contains a significant amount of Hebrew, your answer MUST be in HEBREW.
*   Otherwise, if another non-English language is clearly predominant in the conversation, respond in that language.
*   If the conversation is primarily English or a mix of languages without a clear non-English predominance, respond in English.

If the answer to the question cannot be found within the provided messages, clearly state that the information is not available in the provided context (in the target language). Do not make assumptions or provide information from outside the conversation.`;

// Date filter elements
let startDateInput, endDateInput, clearDatesButton, dateFilterAreaEl, fetchUnreadCheckbox, filterOptionsLabelEl, unreadFilterAreaEl;

// DOM element references
let chatSelectorDropdown, whatsappStatusArea, whatsappConnectionStatus, whatsappQrCodeArea, whatsappQrCodeImg, chatSelectorArea, summarizeButton, askQuestionButton, aiQueryInput, aiChatMessagesDiv, foldButtonElement;
let settingsButton, customPromptSettingsSection, customPromptTextarea, saveCustomPromptButton, resetCustomPromptButton, viewDefaultPromptsButton, defaultPromptsDisplayArea, defaultSummaryPromptDisplay, defaultQaPromptDisplay;

// Wait for DOM to be ready
document.addEventListener('DOMContentLoaded', () => {
  // Get DOM elements
  chatSelectorDropdown = document.getElementById('chat-selector');
  whatsappStatusArea = document.getElementById('whatsapp-status-area');
  whatsappConnectionStatus = document.getElementById('whatsapp-connection-status');
  whatsappQrCodeArea = document.getElementById('whatsapp-qr-code-area');
  whatsappQrCodeImg = document.getElementById('whatsapp-qr-code-img'); // This is a div now
  chatSelectorArea = document.getElementById('chat-selector-area');
  
  summarizeButton = document.getElementById('summarize-group-button');
  askQuestionButton = document.getElementById('ask-question-button');
  aiQueryInput = document.getElementById('ai-query-input');
  aiChatMessagesDiv = document.getElementById('ai-chat-messages');
  foldButtonElement = document.getElementById('fold-button');

  // NEW: Get date filter elements
  startDateInput = document.getElementById('startDate');
  endDateInput = document.getElementById('endDate');
  clearDatesButton = document.getElementById('clear-dates-button');
  dateFilterAreaEl = document.getElementById('date-filter-area');
  fetchUnreadCheckbox = document.getElementById('fetch-unread-checkbox');
  filterOptionsLabelEl = document.getElementById('filter-options-label');
  unreadFilterAreaEl = document.getElementById('unread-filter-area');

  // Custom Prompt Settings Elements
  settingsButton = document.getElementById('settings-button');
  customPromptSettingsSection = document.getElementById('custom-prompt-settings-section');
  customPromptTextarea = document.getElementById('custom-prompt-textarea');
  saveCustomPromptButton = document.getElementById('save-custom-prompt-button');
  resetCustomPromptButton = document.getElementById('reset-custom-prompt-button');
  viewDefaultPromptsButton = document.getElementById('view-default-prompts-button');
  defaultPromptsDisplayArea = document.getElementById('default-prompts-display-area');
  defaultSummaryPromptDisplay = document.getElementById('default-summary-prompt-display');
  defaultQaPromptDisplay = document.getElementById('default-qa-prompt-display');

  if (clearDatesButton) {
    clearDatesButton.addEventListener('click', () => {
        if (startDateInput) startDateInput.value = '';
        if (endDateInput) endDateInput.value = '';
    });
  }

  setupCustomPromptControls();
  waitForSidebarAndSetup();

  function updateFoldButtonIcon(isCollapsed) {
    if (foldButtonElement) {
        const icon = foldButtonElement.querySelector('i');
        if (isCollapsed) {
            icon.className = 'fas fa-chevron-left'; 
        } else {
            icon.className = 'fas fa-chevron-right'; 
        }
    }
  }
  
  function handleToggleSidebarVisibility() {
    sidebarOpen = !sidebarOpen;
    window.parent.postMessage({ action: 'toggleSidebarVisibility', isCollapsed: !sidebarOpen }, '*');
  }

  if (foldButtonElement) {
    foldButtonElement.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      handleToggleSidebarVisibility();
    });
  }

  window.addEventListener('message', (event) => {
    if (event.source !== window.parent) {
        return;
    }
    const message = event.data;
    if (message && message.action === 'updatePanelControls') {
        let isSidebarCollapsed = message.isCollapsed;
        sidebarOpen = !isSidebarCollapsed;
        updateFoldButtonIcon(isSidebarCollapsed); 
    }
  });
  
});

function updateWhatsappConnectionStatus(message, isError = false) {
    if (whatsappConnectionStatus) {
        whatsappConnectionStatus.textContent = message;
        whatsappConnectionStatus.className = isError ? 'status-error' : 'status-ok';
    }
  
    const elementsToHideOnError = [
        chatSelectorArea, summarizeButton, dateFilterAreaEl, 
        filterOptionsLabelEl, unreadFilterAreaEl, document.querySelector('.chat-input-area')
    ];

    if (isError) {
      elementsToHideOnError.forEach(el => { if (el) el.style.display = 'none'; });
      if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'block';
    }
}

async function fetchAndDisplayQrCode() {
    if (!whatsappQrCodeImg || !whatsappQrCodeArea || !whatsappConnectionStatus) {
        console.error("QR display elements not found.");
        return;
    }
    try {
        updateWhatsappConnectionStatus('Fetching QR code...');
        const response = await fetch(`${BACKEND_URL}/auth/qr`);
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: 'Failed to fetch QR code details.' }));
            throw new Error(errorData.error || `HTTP error ${response.status}`);
        }
        const data = await response.json();
        if (data.qrCode) {
            if (typeof QRCode !== 'undefined') {
                whatsappQrCodeImg.innerHTML = ''; 
                new QRCode(whatsappQrCodeImg, {
                    text: data.qrCode, width: 180, height: 180,
                    colorDark: "#000000", colorLight: "#ffffff",
                    correctLevel: QRCode.CorrectLevel.H
                });
                updateWhatsappConnectionStatus('Scan QR code with WhatsApp.');
                whatsappQrCodeArea.style.display = 'block';
                const elementsToHide = [
                    chatSelectorArea, summarizeButton, dateFilterAreaEl, 
                    filterOptionsLabelEl, unreadFilterAreaEl, document.querySelector('.chat-input-area')
                ];
                elementsToHide.forEach(el => { if (el) el.style.display = 'none'; });
            } else {
                whatsappQrCodeImg.innerHTML = 'QR Library not loaded.';
                updateWhatsappConnectionStatus('QR library missing. Check console.', true);
                console.error("QRCode library is not loaded.");
            }
        } else {
            updateWhatsappConnectionStatus('QR code not available from backend.', false); 
            if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'none';
        }
    } catch (error) {
        console.error('Error fetching or displaying QR code:', error);
        updateWhatsappConnectionStatus(`Error fetching QR: ${error.message}`, true);
        if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'none';
    }
}

async function fetchGroups() {
    if (!isBackendConnected()) { 
        updateWhatsappConnectionStatus('Backend not connected. Cannot fetch groups.', true);
        return;
    }
    try {
        updateWhatsappConnectionStatus('Fetching group list...');
        const response = await fetch(`${BACKEND_URL}/groups`);
        if (!response.ok) {
            let errorText = `HTTP error ${response.status}`;
            try { const errorData = await response.json(); errorText = errorData.error || errorText; } catch (e) { /* ignore */ }
            throw new Error(errorText);
        }
        const groups = await response.json();
        populateChatSelector(groups);
        if (groups && Array.isArray(groups) && groups.length > 0) {
            updateWhatsappConnectionStatus('WhatsApp Connected. Select a group.');
            if(chatSelectorArea) chatSelectorArea.style.display = 'block';
            if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'none';
        } else {
            updateWhatsappConnectionStatus('WhatsApp Connected. No groups found or accessible.');
            if(chatSelectorArea) chatSelectorArea.style.display = 'block'; 
            if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'none';
        }
        hideInitialLoadingIndicator();
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        updateWhatsappConnectionStatus(`Error fetching groups: ${errorMessage}`, true);
        populateChatSelector([]);
        hideInitialLoadingIndicator();
    }
}

function populateChatSelector(groups) {
    if (!chatSelectorDropdown) return;
    const previouslySelectedId = currentSelectedChatId;
    chatSelectorDropdown.innerHTML = ''; 
    const defaultOption = document.createElement('option');
    defaultOption.value = "";
    defaultOption.textContent = groups && groups.length > 0 ? "-- Select a Group --" : "-- No Groups Available --";
    chatSelectorDropdown.appendChild(defaultOption);

    if (groups && Array.isArray(groups)) {
        groups.forEach(group => {
            if (group && group.id && group.name) { 
                const option = document.createElement('option');
                option.value = group.id;
                option.textContent = group.name; 
                chatSelectorDropdown.appendChild(option);
            }
        });
        if (previouslySelectedId) {
            chatSelectorDropdown.value = previouslySelectedId;
            if (chatSelectorDropdown.value !== previouslySelectedId) currentSelectedChatId = ""; 
        }
    }
}

function waitForSidebarAndSetup() {
    const panel = document.getElementById('ai-copilot-panel');
    if (!panel) {
        setTimeout(waitForSidebarAndSetup, 50);
        return;
    }
    showInitialLoadingIndicator();
    setupChatInterface(); 
    attachLoadingIndicators(); 
    addRefreshButton(); 
    initAuthAndGroupListing(); 
    checkBackendAndWhatsAppStatus(); 
    const messageList = document.querySelector('.message-list');
    if (messageList && messageList.childElementCount === 0) {
        addMessageToChat('assistant', "Welcome! Connect to WhatsApp and select a group to begin.");
    }
    setInterval(checkBackendAndWhatsAppStatus, 15000); 
    setTimeout(setupNewFeatureButtons, 100);
    loadCustomPrompt(); // Load saved custom prompt
}

function setupCustomPromptControls() {
    if (settingsButton) {
        settingsButton.addEventListener('click', () => {
            if (customPromptSettingsSection) {
                customPromptSettingsSection.style.display = customPromptSettingsSection.style.display === 'none' ? 'block' : 'none';
            }
        });
    }

    if (saveCustomPromptButton) {
        saveCustomPromptButton.addEventListener('click', () => {
            const promptText = customPromptTextarea ? customPromptTextarea.value.trim() : "";
            chrome.storage.local.set({ customSystemPrompt: promptText }, () => {
                if (chrome.runtime.lastError) {
                    console.error('Error saving custom prompt:', chrome.runtime.lastError);
                    showStatus('שגיאה בשמירת ההנחיה.', true);
                } else {
                    console.log('Custom prompt saved.');
                    showStatus('הנחיה מותאמת אישית נשמרה!', false);
                }
            });
        });
    }

    if (resetCustomPromptButton) {
        resetCustomPromptButton.addEventListener('click', () => {
            chrome.storage.local.remove('customSystemPrompt', () => {
                if (chrome.runtime.lastError) {
                    console.error('Error resetting custom prompt:', chrome.runtime.lastError);
                    showStatus('שגיאה באיפוס ההנחיה.', true);
                } else {
                    if (customPromptTextarea) customPromptTextarea.value = '';
                    console.log('Custom prompt reset.');
                    showStatus('הנחיה אופסה לברירת מחדל.', false);
                }
            });
        });
    }

    if (viewDefaultPromptsButton) {
        viewDefaultPromptsButton.addEventListener('click', () => {
            if (defaultSummaryPromptDisplay) defaultSummaryPromptDisplay.textContent = DEFAULT_SUMMARY_PROMPT_TEXT_DISPLAY;
            if (defaultQaPromptDisplay) defaultQaPromptDisplay.textContent = DEFAULT_QA_PROMPT_TEXT_DISPLAY;
            if (defaultPromptsDisplayArea) {
                defaultPromptsDisplayArea.style.display = defaultPromptsDisplayArea.style.display === 'none' ? 'block' : 'none';
            }
        });
    }
}

function loadCustomPrompt() {
    if (customPromptTextarea) {
        chrome.storage.local.get('customSystemPrompt', (result) => {
            if (chrome.runtime.lastError) {
                console.error('Error loading custom prompt:', chrome.runtime.lastError);
                return;
            }
            if (result.customSystemPrompt) {
                customPromptTextarea.value = result.customSystemPrompt;
            }
        });
    }
}

function showAILoading(feature) {
    if (feature === 'summarize' && summarizeButton) {
        summarizeButton.disabled = true;
        summarizeButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i> מסכם...`;
    } else if (feature === 'ask' && askQuestionButton) {
        askQuestionButton.disabled = true;
        if (aiQueryInput) aiQueryInput.disabled = true;
    }
}

function hideAILoading(feature) {
    const messagesAvailable = !!currentSelectedChatId; 
    const chatInputArea = document.querySelector('.chat-input-area');

    if (feature === 'summarize' && summarizeButton) {
        summarizeButton.disabled = !messagesAvailable;
        summarizeButton.innerHTML = `<i class="fas fa-file-alt"></i> סכם קבוצה`;
        if (summarizeButton) summarizeButton.style.display = currentSelectedChatId ? 'flex' : 'none';
    } else if (feature === 'ask' && askQuestionButton) {
        askQuestionButton.disabled = !messagesAvailable;
        if (aiQueryInput) aiQueryInput.disabled = !messagesAvailable;
    }
    if (chatInputArea) chatInputArea.style.display = currentSelectedChatId ? 'flex' : 'none';
    if(summarizeButton) { // Redundant check but safe
        summarizeButton.style.display = currentSelectedChatId ? 'flex' : 'none';
        summarizeButton.disabled = !messagesAvailable;
    }
}

function isValidDdMmYyyy(dateString) {
    if (!dateString) return true; 
    const regex = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
    const parts = dateString.match(regex);
    if (!parts) return false;
    const day = parseInt(parts[1], 10);
    const month = parseInt(parts[2], 10); 
    const year = parseInt(parts[3], 10);
    if (year < 1000 || year > 3000 || month === 0 || month > 12) return false;
    const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) monthLength[1] = 29;
    return day > 0 && day <= monthLength[month - 1];
}

function setupNewFeatureButtons() {
    if (!summarizeButton || !askQuestionButton || !aiQueryInput) {
        console.error('AI feature buttons or input not found in DOM.');
        return;
    }
    hideAILoading('summarize'); 
    hideAILoading('ask');       

    summarizeButton.addEventListener('click', async () => {
        if (!currentSelectedChatId) {
            addMessageToChat('assistant', 'יש לבחור קבוצה לפני בקשת סיכום.', true);
            return;
        }
        const startDate = startDateInput ? startDateInput.value.trim() : null;
        const endDate = endDateInput ? endDateInput.value.trim() : null;
        if ((startDate && !isValidDdMmYyyy(startDate)) || (endDate && !isValidDdMmYyyy(endDate))) {
            addMessageToChat('assistant', 'פורמט תאריך לא תקין. אנא השתמש בפורמט DD/MM/YYYY או השאר ריק.', true);
            return;
        }
        addMessageToChat('user', `מבקש סיכום עבור ${currentSelectedChatName || 'הקבוצה הנבחרת'}${startDate || endDate ? ` (תאריכים: ${startDate || ''} - ${endDate || ''})` : ''}.`);
        showAILoading('summarize');
        chrome.storage.local.get('customSystemPrompt', async (result) => {
            if (chrome.runtime.lastError) {
                console.error('Error getting custom prompt for summary:', chrome.runtime.lastError);
                addMessageToChat('assistant', 'שגיאה בטעינת הנחיה מותאמת אישית.', true);
                hideAILoading('summarize');
                return;
            }
            const customPromptText = result.customSystemPrompt || null;
            if (customPromptText) {
                console.log("[PANEL.JS] Sending custom prompt for summary.");
            } else {
                console.log("[PANEL.JS] No custom prompt found, backend will use default for summary.");
            }

            try {
                const requestBody = {
                    chatId: currentSelectedChatId,
                    startDate: startDate || null,
                    endDate: endDate || null,
                    fetchOnlyUnread: fetchUnreadCheckbox ? fetchUnreadCheckbox.checked : false,
                    ...(customPromptText && { customPromptText: customPromptText }) // Add if exists
                };
                const response = await fetch(`${BACKEND_URL}/ai/summarize`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });
                const data = await response.json();
                if (!response.ok) throw new Error(data.error || `HTTP error ${response.status}`);
                addMessageToChat('assistant', `סיכום עבור ${currentSelectedChatName}:\n${data.summary}`);
            } catch (error) {
                console.error('Error summarizing group:', error);
                addMessageToChat('assistant', `שגיאה בסיכום: ${error.message}`, true);
            } finally {
                hideAILoading('summarize');
            }
        });
    });

    askQuestionButton.addEventListener('click', async () => {
        const question = aiQueryInput.value.trim();
        if (!question) {
            addMessageToChat('assistant', 'יש להקליד שאלה תחילה.', true);
            return;
        }
        if (!currentSelectedChatId) {
            addMessageToChat('assistant', 'יש לבחור קבוצה עם הודעות לפני שליחת שאלה.', true);
            return;
        }
        const startDate = startDateInput ? startDateInput.value.trim() : null;
        const endDate = endDateInput ? endDateInput.value.trim() : null;
        if ((startDate && !isValidDdMmYyyy(startDate)) || (endDate && !isValidDdMmYyyy(endDate))) {
            addMessageToChat('assistant', 'פורמט תאריך לא תקין. אנא השתמש בפורמט DD/MM/YYYY או השאר ריק.', true);
            return;
        }
        addMessageToChat('user', `שאלה: ${question}${startDate || endDate ? ` (בהקשר תאריכים: ${startDate || ''} - ${endDate || ''})` : ''}`);
        showAILoading('ask');

        chrome.storage.local.get('customSystemPrompt', async (result) => {
            if (chrome.runtime.lastError) {
                console.error('Error getting custom prompt for Q&A:', chrome.runtime.lastError);
                addMessageToChat('assistant', 'שגיאה בטעינת הנחיה מותאמת אישית.', true);
                hideAILoading('ask');
                return;
            }
            const customPromptText = result.customSystemPrompt || null;
            if (customPromptText) {
                console.log("[PANEL.JS] Sending custom prompt for Q&A.");
            } else {
                console.log("[PANEL.JS] No custom prompt found, backend will use default for Q&A.");
            }

            try {
                const requestBody = {
                    chatId: currentSelectedChatId,
                    question: question,
                    startDate: startDate || null,
                    endDate: endDate || null,
                    fetchOnlyUnread: fetchUnreadCheckbox ? fetchUnreadCheckbox.checked : false,
                    ...(customPromptText && { customPromptText: customPromptText }) // Add if exists
                };
                const response = await fetch(`${BACKEND_URL}/ai/ask`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });
                const data = await response.json();
                if (!response.ok) throw new Error(data.error || `HTTP error ${response.status}`);
                addMessageToChat('assistant', `תשובה:\n${data.answer}`);
                aiQueryInput.value = '';
            } catch (error) {
                console.error('Error asking question:', error);
                addMessageToChat('assistant', `שגיאה בקבלת תשובה: ${error.message}`, true);
            } finally {
                hideAILoading('ask');
            }
        });
    });
}

async function checkBackendAndWhatsAppStatus() {
    const backendOk = await checkBackendConnection();
    const elementsToHide = [
        chatSelectorArea, summarizeButton, dateFilterAreaEl, 
        filterOptionsLabelEl, unreadFilterAreaEl, document.querySelector('.chat-input-area')
    ];

    if (backendOk) {
        try {
            const response = await fetch(`${BACKEND_URL}/auth/status`);
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: 'Failed to get WhatsApp status details.' }));
                throw new Error(errorData.message || `HTTP error ${response.status}`);
            }
            const status = await response.json();
            updateWhatsappConnectionStatus(status.message, !status.ready && !status.qrCodeAvailable);

            if (status.ready) {
                if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'none';
                // Filter elements visibility will be handled by initAuthAndGroupListing after groups are fetched
                fetchGroups(); 
            } else if (status.qrCodeAvailable) { 
                elementsToHide.forEach(el => { if (el) el.style.display = 'none'; });
                fetchAndDisplayQrCode(); 
            } else { 
                elementsToHide.forEach(el => { if (el) el.style.display = 'none'; });
                if(whatsappQrCodeArea) whatsappQrCodeArea.style.display = 'none';
            }
        } catch (error) { 
            updateWhatsappConnectionStatus(`Error checking WhatsApp: ${error.message}`, true); 
        }
    } else { 
        updateWhatsappConnectionStatus('Backend not connected. Cannot check WhatsApp status.', true); 
    }
    hideInitialLoadingIndicator(); 
}

function initAuthAndGroupListing() {
    if (chatSelectorDropdown) {
        chatSelectorDropdown.addEventListener('change', async () => { 
            currentSelectedChatId = chatSelectorDropdown.value;
            const selectedOption = chatSelectorDropdown.options[chatSelectorDropdown.selectedIndex];
            currentSelectedChatName = selectedOption ? selectedOption.text.split(' (')[0] : null; 
            
            const chatInputArea = document.querySelector('.chat-input-area');
            const elementsToShow = [summarizeButton, filterOptionsLabelEl, unreadFilterAreaEl, dateFilterAreaEl, chatInputArea];
            const elementsToHide = [summarizeButton, filterOptionsLabelEl, unreadFilterAreaEl, dateFilterAreaEl, chatInputArea];


            if (currentSelectedChatId) {
                console.log(`[PANEL.JS] Group selected: ${currentSelectedChatName} (ID: ${currentSelectedChatId})`);
                showStatus(`טוען הודעות עבור ${currentSelectedChatName}...`); 
                fetchedMessagesForSelectedChat = [];
                
                elementsToShow.forEach(el => { if(el) el.style.display = el === summarizeButton || el === chatInputArea ? 'flex' : 'block';});
                if(aiQueryInput) aiQueryInput.disabled = false;
                if(askQuestionButton) askQuestionButton.disabled = false;

                hideAILoading('summarize'); // Correctly sets button state
                hideAILoading('ask'); // Correctly sets button state

                try {
                    const messageCount = 1000; 
                    const response = await fetch(`${BACKEND_URL}/groups/${currentSelectedChatId}/messages?count=${messageCount}`);
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ error: 'Failed to fetch messages.' }));
                        throw new Error(errorData.error || `HTTP error ${response.status}`);
                    }
                    const messages = await response.json();
                    fetchedMessagesForSelectedChat = messages; 
                    console.log(`[PANEL.JS] Fetched ${fetchedMessagesForSelectedChat.length} messages for ${currentSelectedChatName}`);
                    showStatus(`${fetchedMessagesForSelectedChat.length} הודעות נטענו עבור ${currentSelectedChatName}. מוכן לפעולות AI.`);
                    
                    hideAILoading('summarize'); 
                    hideAILoading('ask');       

                } catch (error) {
                    console.error('[PANEL.JS] Error fetching messages:', error);
                    showStatus(`שגיאה בטעינת הודעות: ${error.message}`, true); 
                    fetchedMessagesForSelectedChat = [];
                    hideAILoading('summarize'); 
                    hideAILoading('ask');
                }
            } else { 
                currentSelectedChatName = null;
                fetchedMessagesForSelectedChat = [];
                elementsToHide.forEach(el => { if(el) el.style.display = 'none'; });
                if(aiQueryInput) aiQueryInput.disabled = true;
                if(askQuestionButton) askQuestionButton.disabled = true;
                showStatus('לא נבחרה קבוצה.'); 
                hideAILoading('summarize'); // Ensure buttons are correctly disabled/hidden
                hideAILoading('ask');
            }
        });
    }
}

let backendConnected = false; 

async function checkBackendConnection() {
  const debugInfo = document.getElementById('debug-connection-info');
  try {
    const response = await fetch(`${BACKEND_URL}/health`);
    if (response.ok) {
      if (debugInfo) {
        debugInfo.textContent = `Backend: Connected`;
        debugInfo.style.color = 'green';
      }
      backendConnected = true;
      return true;
    } else {
      if (debugInfo) {
        debugInfo.textContent = `Backend: Failed (Status ${response.status})`;
        debugInfo.style.color = 'red';
      }
      backendConnected = false;
      return false;
    }
  } catch (error) {
    if (debugInfo) {
        debugInfo.textContent = `Backend: Error (${error.message.substring(0,20)}...)`;
        debugInfo.style.color = 'red';
    }
    backendConnected = false;
    return false;
  }
}
function isBackendConnected() { return backendConnected; }

function showInitialLoadingIndicator() {
  if (document.querySelector('.initial-loading-indicator')) return;
  const indicator = document.createElement('div');
  indicator.className = 'initial-loading-indicator';
  indicator.innerHTML = `<div class="spinner"></div><p>Initializing WhatsApp Insights AI...</p>`;
  document.body.appendChild(indicator);
} 

function hideInitialLoadingIndicator() {
  const indicator = document.querySelector('.initial-loading-indicator');
  if (indicator) indicator.remove();
}

function showStatus(message, isError = false) {
  const statusElement = document.getElementById('ai-status-message');
  if (statusElement) {
    statusElement.textContent = message;
    statusElement.className = `status-message ${isError ? 'status-error' : 'status-ok'}`;
    statusElement.style.display = 'block';
    if (!isError) {
      setTimeout(() => { statusElement.style.display = 'none'; }, 4000);
    }
  } else {
    console.log(`Status (${isError ? 'Error' : 'Info'}): ${message}`);
  }
}

function addMessageToChat(sender, text, isError = false) {
  if (!aiChatMessagesDiv) {
    console.error("Chat message display area not found");
    return;
  }
  const messageItem = document.createElement('div');
  messageItem.classList.add('message', sender === 'user' ? 'user-message' : 'assistant-message');
  if (isError) messageItem.classList.add('error-message');
  const senderNameStrong = document.createElement('strong');
  senderNameStrong.textContent = sender === 'user' ? 'You:' : 'AI Assistant:';
  const messageContentDiv = document.createElement('div'); 
  messageContentDiv.classList.add('message-content'); 
  messageContentDiv.innerHTML = text;
  messageItem.appendChild(senderNameStrong);
  messageItem.appendChild(messageContentDiv); 
  aiChatMessagesDiv.appendChild(messageItem);
  aiChatMessagesDiv.scrollTop = aiChatMessagesDiv.scrollHeight; 
}

function setupChatInterface() {
}

function attachLoadingIndicators() {
}

function addRefreshButton() {
    const refreshButton = document.getElementById('refresh-button');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => {
            console.log("Refresh button clicked. Re-checking status.");
            showInitialLoadingIndicator(); 
            checkBackendAndWhatsAppStatus();
        });
    }
}